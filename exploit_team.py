import os
from autogen.agentchat import AssistantAgent, ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager
from autogen.coding.local_commandline_code_executor import LocalCommandLineCodeExecutor
from reading_function import read_file
from report_save import save_report

def create_exploit_team(llm_config, interaction_mode):
    os.makedirs("pentest_results/exploit", exist_ok=True)

    # === Exploit Generator ===
    exploit_agent = ConversableAgent(
        name="Exploit-Agent",
        system_message="""
    You're an exploit agent. You will be provided with a vulnerability summary report (SQLi, LFI, etc.).
    For each finding, generate ONE verification/exploitation command:
    - SQL Injection: use sqlmap to confirm and extract a single value (e.g., user()).
    - LFI: use curl or wget to read sensitive files (e.g., /etc/passwd).
    Return each command in its own bash block, redirect output to pentest_results/exploit/exploit_<type>_<name>.txt
""",
        llm_config=llm_config,
        human_input_mode=interaction_mode,
    )

    # === Command Checker ===
    checker = ConversableAgent(
        name="Exploit-Checker",
        system_message="Check syntax of exploit commands and ensure proper output redirection to .txt files.",
        llm_config=llm_config,
        human_input_mode=interaction_mode,
    )

    # === Executor ===
    executor = LocalCommandLineCodeExecutor(timeout=3600, work_dir=".")
    code_executor = AssistantAgent(
        name="Code-Executor",
        llm_config=False,
        code_execution_config={"executor": executor},
        human_input_mode=interaction_mode,
    )

    # === File Reader ===
    file_reader = AssistantAgent(
        name="File-Reader",
        system_message="Read and display exploit output files.",
        llm_config=llm_config,
        human_input_mode="NEVER",
    )
    file_reader.register_for_llm(name="read_file", description="Read an exploit output file")(read_file)
    file_reader.register_for_execution(name="read_file", description="Read an exploit output file")(read_file)

    # === Report Writer ===
    reporter = AssistantAgent(
        name="Report-Writer",
        system_message="Summarize exploit results. Do not generate code. Always call saving-report.",
        llm_config=llm_config,
        human_input_mode="ALWAYS",
    )
    reporter.register_for_llm(name="saving-report", description="Save exploit summary report")(save_report)
    reporter.register_for_execution(name="saving-report", description="Save exploit summary report")(save_report)

    # === User Proxy ===
    user_proxy = UserProxyAgent(
        name="User-Proxy",
        system_message="A human analyst supervising exploitation phase.",
        is_termination_msg=lambda msg: "TERMINATE" in msg["content"],
        code_execution_config={"work_dir": ".", "use_docker": False},
        human_input_mode=interaction_mode,
        llm_config=llm_config,
    )

    # Assemble GroupChat
    agents = [user_proxy, exploit_agent, checker, code_executor, file_reader, reporter]
    exploit_team = GroupChat(agents=agents, messages=[], max_round=50)

    # Manager coordinates exploitation steps
    manager = GroupChatManager(
        name="Exploit-Manager",
        groupchat=exploit_team,
        llm_config=llm_config,
        system_message="""
    You're in charge of exploitation:

    1. Ask for vulnerability report.
    2. Exploit-Agent generate one exploit command per finding.
    3. Validate commands with Exploit-Checker.
    4. Have User-Proxy approve.
    5. Execute each command.
    6. Read output with File-Reader.
    7. Summarize exploit results with Report-Writer.
    8. Save final exploit report.

    âœ… After finishing exploitation and saving report, SEND "TERMINATE" to User-Proxy to end phase.
    """
)


    # Seed message: request the vuln summary
    exploit_team.messages.append({
        "name": user_proxy.name,
        "role": "user",
        "content": "Please read pentest_results/reports/vulnscan_report.txt using read_file and start the exploitation phase."
    })

    return {"manager": manager, "user_proxy": user_proxy, "team": exploit_team}
